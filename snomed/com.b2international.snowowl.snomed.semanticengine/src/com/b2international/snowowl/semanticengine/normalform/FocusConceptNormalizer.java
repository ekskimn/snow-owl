/*
 * Copyright 2011-2015 B2i Healthcare Pte Ltd, http://b2i.sg
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.b2international.snowowl.semanticengine.normalform;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.b2international.snowowl.core.ApplicationContext;
import com.b2international.snowowl.core.api.browser.IClientTerminologyBrowser;
import com.b2international.snowowl.dsl.scg.Concept;
import com.b2international.snowowl.semanticengine.subsumption.SubsumptionTester;
import com.b2international.snowowl.semanticengine.utils.SemanticUtils;
import com.b2international.snowowl.snomed.SnomedConstants.Concepts;
import com.b2international.snowowl.snomed.datastore.SnomedClientStatementBrowser;
import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptIndexEntry;
import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRelationshipIndexEntry;

/**
 * <b>5.3.3 Normalize focus concepts</b><br/>
 * The set of focus concepts is normalized to generated two separate outputs:<br/><br/>
 * <b>5.3.3.1 The set of normalized definitions of each focus concept</b><br/>
 * The set of normalized definitions includes a separate normalized definition for each focus concept,
 * The normalized definition includes
 * <ul>
 * <li>All ungrouped relationships</li>
 * <li>All relationship groups complete with contained relationships</li>
 * </ul>
 * All relationship values are normalized by recursively following the full set of rules described 
 * in section 5.3.<br/>
 * Note: Storage of pre-computed normalized form of concept definitions simplifies this process as 
 * it removes the requirement for recursive processing of definitions at run time.
 * The set of normalized definitions is passed to the "Merge definitions" process (5.3.4).<br/><br/>
 * <b>5.3.3.2 The non-redundant proximal primitive supertypes of the focus concepts</b><br/>
 * The non-redundant proximal primitive supertypes of the focus concepts is the set of all primitive 
 * supertypes of all the focus concepts with redundant concepts removed.<br/>
 * A concept is redundant if it is: 
 * <ul>
 * <li>A duplicate of another member of the set</li>
 * <li>A super type of another concept in the set.</li>
 * </ul>
 * The set of proximal primitive supertypes generated by this process is passed to the 
 * "Create expression" process (5.3.6) as the focus concepts for the output expression.
 * 
 */
public class FocusConceptNormalizer {
	
	private final SubsumptionTester subsumptionTester;
	private final IClientTerminologyBrowser<SnomedConceptIndexEntry, String> terminologyBrowser;
	private final SnomedClientStatementBrowser statementBrowser;
	
	public FocusConceptNormalizer(IClientTerminologyBrowser<SnomedConceptIndexEntry, String> terminologyBrowser, SnomedClientStatementBrowser statementBrowser) {
		this.terminologyBrowser = terminologyBrowser;
		this.statementBrowser = statementBrowser;
		this.subsumptionTester = new SubsumptionTester(terminologyBrowser);
	}


	/** 
	 * @param focusConcepts
	 * @return the normalized focus concepts
	 */
	public FocusConceptNormalizationResult normalizeFocusConcepts(Collection<Concept> focusConcepts) {
		Collection<SnomedConceptIndexEntry> proximalPrimitiveSuperTypes = collectProximalPrimitiveSupertypes(focusConcepts);
		Collection<SnomedConceptIndexEntry> filteredPrimitiveSuperTypes = filterRedundantSuperTypes(proximalPrimitiveSuperTypes);
		ConceptDefinitionNormalizer conceptDefinitionNormalizer = new ConceptDefinitionNormalizer(terminologyBrowser, statementBrowser);
		Map<Concept, ConceptDefinition> conceptDefinitions = conceptDefinitionNormalizer.getNormalizedConceptDefinitions(focusConcepts);
		ConceptDefinitionMerger conceptDefinitionMerger = new ConceptDefinitionMerger(subsumptionTester);
		ConceptDefinition mergedFocusConceptDefinitions = conceptDefinitionMerger.mergeDefinitions(conceptDefinitions);
		return new FocusConceptNormalizationResult(filteredPrimitiveSuperTypes, mergedFocusConceptDefinitions);
	}

	private Collection<SnomedConceptIndexEntry> collectProximalPrimitiveSupertypes(Collection<Concept> focusConcepts) {
		Set<SnomedConceptIndexEntry> proximatePrimitiveSuperTypes = new HashSet<SnomedConceptIndexEntry>();
		
		for (Concept concept : focusConcepts) {
			SnomedConceptIndexEntry focusConceptMini = SemanticUtils.getAndCheckConceptById(terminologyBrowser, concept.getId());
			proximatePrimitiveSuperTypes.addAll(getProximatePrimitiveSuperTypes(focusConceptMini));
		}
		
		return proximatePrimitiveSuperTypes;
	}

	/**
	 * The non-redundant proximal primitive supertypes of the focus concepts is the set of 
	 * all primitive supertypes of all the focus concepts with redundant concepts removed.<br/>
	 * A concept is redundant if it is:
	 * <ul>
	 * <li>A duplicate of another member of the set</li>
	 * <li>A super type of another concept in the set.</li>
	 * </ul>
	 * @param proximalPrimitiveSuperTypes
	 * @return
	 */
	private Collection<SnomedConceptIndexEntry> filterRedundantSuperTypes(Collection<SnomedConceptIndexEntry> proximalPrimitiveSuperTypes) {
		List<SnomedConceptIndexEntry> filteredSuperTypes = new ArrayList<SnomedConceptIndexEntry>();
		
		for(SnomedConceptIndexEntry superType: proximalPrimitiveSuperTypes) {
			if  (!filteredSuperTypes.contains(superType) && !containsSubType(proximalPrimitiveSuperTypes, superType)) {
				filteredSuperTypes.add(superType);
			}
		}
		
		return filteredSuperTypes;
	}

	private boolean containsSubType(Collection<SnomedConceptIndexEntry> proximalPrimitiveSuperTypes, SnomedConceptIndexEntry conceptToTest) {
		Collection<SnomedConceptIndexEntry> conceptSubTypes = terminologyBrowser.getSubTypes(conceptToTest);
		for (SnomedConceptIndexEntry conceptMini : proximalPrimitiveSuperTypes) {
			if (conceptSubTypes.contains(conceptMini)) {
				return true;
			}
		}
		
		return false;
	}


	private Set<SnomedConceptIndexEntry> getProximatePrimitiveSuperTypes(SnomedConceptIndexEntry concept) {
		Set<SnomedConceptIndexEntry> proximatePrimitiveSuperTypes = new HashSet<SnomedConceptIndexEntry>();
		
		if (concept.isPrimitive()) {
			proximatePrimitiveSuperTypes.add(concept);
			return proximatePrimitiveSuperTypes;
		}
		
		SnomedClientStatementBrowser statementBrowser = ApplicationContext.getInstance().getService(SnomedClientStatementBrowser.class);
		Collection<SnomedRelationshipIndexEntry> outboundRelationships = statementBrowser.getActiveOutboundStatementsById(concept.getId());
		for (SnomedRelationshipIndexEntry relationship : outboundRelationships) {
			if (relationship.getAttributeId().equals(Concepts.IS_A)) {
				if (terminologyBrowser.getConcept(relationship.getValueId()).isPrimitive()) {
					proximatePrimitiveSuperTypes.add(terminologyBrowser.getConcept(relationship.getValueId()));
				} else {
					proximatePrimitiveSuperTypes.addAll(getProximatePrimitiveSuperTypes(terminologyBrowser.getConcept(relationship.getValueId())));
				}
			}
		}
		return filterSuperTypesToProximate(proximatePrimitiveSuperTypes);
	}

	private Set<SnomedConceptIndexEntry> filterSuperTypesToProximate(Set<SnomedConceptIndexEntry> superTypes) {
			Set<SnomedConceptIndexEntry> filteredProximateSuperTypes = new HashSet<SnomedConceptIndexEntry>();
			
			for (SnomedConceptIndexEntry superType : superTypes) {
				if (filteredProximateSuperTypes.isEmpty()) {
					filteredProximateSuperTypes.add(superType);
				} else {
					// remove types from proximateSuperTypes, if there is a more specific type among the superTypes
					boolean toBeAdded = false;
					Set<SnomedConceptIndexEntry> removedProximateSuperTypes = new HashSet<SnomedConceptIndexEntry>();
					for (SnomedConceptIndexEntry proximateSuperType : filteredProximateSuperTypes) {
						/*
						 * If the super type is a super type of a type already in the proximate super type set, then 
						 * it shouldn't be added, no further checks necessary.
						 */
						if (isSuperTypeOf(superType, proximateSuperType)) {
							toBeAdded = false;
							break;
						}
						
						/* 
						 * Remove super type and add more specific type. In case of multiple super types we get here several times, 
						 * but since we are using Set<Integer>, adding the same concept multiple times is not an issue. 
						 */
						if (isSuperTypeOf(proximateSuperType, superType)) {
							removedProximateSuperTypes.add(proximateSuperType);
						}
						
						toBeAdded = true;
					}
					
					// process differences
					filteredProximateSuperTypes.removeAll(removedProximateSuperTypes);
					if (toBeAdded) {
						filteredProximateSuperTypes.add(superType);
					}
				}
			}
			
			return filteredProximateSuperTypes;
		}

	private boolean isSuperTypeOf(SnomedConceptIndexEntry superType, SnomedConceptIndexEntry subType) {
		return terminologyBrowser.isSuperTypeOf(superType, subType);
		
	}
}